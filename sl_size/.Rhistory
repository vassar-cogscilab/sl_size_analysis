data=read.csv('sl_size_data_prelim.csv')
View(data)
View(data)
data=read.csv2('sl_size_data_prelim.csv')
View(data)
all_data=read.csv2('sl_size_data_prelim.csv')
unique(all_data$subject_id)
all_data[1,]
all_data$subject_id=as.numeric(all_data$subject_id)
View(all_data)
install.packages("tidyverse")
library(dplyr)
test_data=subset(all_data, sequence_type=='unpredictable'|sequence_type=='predictable')
View(test_data)
summary_data=test_data%>%group_by(subject_id, sequence_type, block)
summary_data=test_data%>%group_by(subject_id, sequence_type, block)%>%summarize(mean.rt=mean(rt))
View(summary_data)
install.packages("Sciplot")
y
install.packages("sciplot")
library(sciplot)
lineplot.CI(block, mean.rt, sequence_type, data=summary_data)
summary_data=test_data%>%group_by(subject_id, sequence_type, block)%>%filter(correct==1)%>%summarize(mean.rt=mean(rt))
library(sciplot)
lineplot.CI(block, mean.rt, sequence_type, data=summary_data)
summary_data=test_data%>%group_by(subject_id, sequence_type, block)%>%filter(correct==1 & rt<2000)%>%summarize(mean.rt=mean(rt))
lineplot.CI(block, mean.rt, sequence_type, data=summary_data)
hist(test_data$rt)
mean(test_data$rt)
sd(test_data$rt)
hist(test_data$rt,breaks=1000)
max(test_data$rt)
hist(test_data$rt,breaks=1000,xlim=c(0,2000))
hist(test_data$rt,breaks=1000,xlim=c(0,3000))
summary_data=test_data%>%group_by(subject_id, sequence_type, block)%>%filter(correct==1 & rt<2500)%>%summarize(mean.rt=mean(rt))
lineplot.CI(block, mean.rt, sequence_type, data=summary_data)
View(test_data)
View(all_data)
View(test_data)
View(summary_data)
View(data)
View(all_data)
hist(test_data$rt,breaks=1000,xlim=c(0,3000))
sd(test_data$rt)
lineplot.CI(block, mean.rt, sequence_type, data=summary_data)
lineplot.CI(block, mean.rt, sequence_type, data=summary_data)
library(sciplot)
lineplot.CI(block, mean.rt, sequence_type, data=summary_data)
mean(test_data$rt)
sd(test_data$rt)
hist(test_data$rt,breaks=1000,xlim=c(0,3000))
all_data$grid
levels(all_data$grid)
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>% group_by(id) %>% select(id,grid)
library(dplyr)
library(sciplot)
all_data=read.csv2('sl_size_data_prelim.csv')
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>% group_by(id) %>% select(id,grid)
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>% group_by(subject_id) %>% select(id,grid)
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>% group_by(subject_id) %>% select(subject_id,grid)
View(subject_set_size_condition)
View(summary_data)
View(subject_set_size_condition)
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>%
group_by(subject_id) %>% distinct(subject_id,grid) %>%
# count the number of subjects
unique(all_data$subject_id)
View(data)
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>%
group_by(subject_id) %>% summarize()
library(dplyr)
library(sciplot)
all_data=read.csv2('sl_size_data_prelim.csv')
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>%
group_by(subject_id) %>% summarize()
View(subject_set_size_condition)
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>%
group_by(subject_id, grid) %>% summarize()
View(subject_set_size_condition)
View(subject_set_size_condition)
subject_set_size_condition$grid
subject_set_size_condition$grid <- as.numeric(factor(as.character(subject_set_size_condition$grid)))
View(subject_set_size_condition)
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>%
group_by(subject_id, grid) %>% summarize()
subject_set_size_condition$set_size <- as.numeric(factor(as.character(subject_set_size_condition$grid)))
View(subject_set_size_condition)
subject_set_size_condition$set_size <- as.numeric(factor(as.character(subject_set_size_condition$grid)))*2 + 2
View(subject_set_size_condition)
all_data$set_size <- sapply(all_data$subject_id, function(x){
return(subset(subject_set_size_condition, subject_id == x)$set_size)
})
View(all_data)
summary.set.size <- test_data %>% group_by(subject_id, sequence_type, block, set_size) %>%
filter(correct==1 & rt < 2500) %>% summarize(mean.rt = mean(rt))
test_data=subset(all_data, sequence_type=='unpredictable'|sequence_type=='predictable')
summary.set.size <- test_data %>% group_by(subject_id, sequence_type, block, set_size) %>%
filter(correct==1 & rt < 2500) %>% summarize(mean.rt = mean(rt))
install.packages("ggplot2")
library(ggplot2)
ggplot(summary.set.size, aes(x=block, y=mean.rt, color=sequence_type))+
stat_summary(fun.y=mean, fun.ymax=function(x){return(mean(x)+se(x))}, fun.ymin = function(x){return(mean(x)-se(x))})
ggplot(summary.set.size, aes(x=block, y=mean.rt, color=sequence_type)) +
stat_summary(fun.y=mean, fun.ymax=function(x){return(mean(x)+se(x))}, fun.ymin = function(x){return(mean(x)-se(x))})+
facet_wrap(set_size)
ggplot(summary.set.size, aes(x=block, y=mean.rt, color=sequence_type)) +
stat_summary(fun.y=mean, fun.ymax=function(x){return(mean(x)+se(x))}, fun.ymin = function(x){return(mean(x)-se(x))})+
facet_wrap(~set_size)
View(summary.set.size)
summary.set.size.no.block <- test_data %>% group_by(subject_id, sequence_type,set_size) %>%
filter(correct==1 & rt < 2500) %>% summarize(mean.rt = mean(rt))
View(summary.set.size.no.block)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==4), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==6), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==8), paired=T)
bargraph.CI(set_size, mean.rt, sequence.type, data=summary.set.size.no.block)
bargraph.CI(set_size, mean.rt, sequence_type, data=summary.set.size.no.block)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==8), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==6), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==4), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==6), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==8), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==4), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==6), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==8), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==4), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==6), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==8), paired=T)
all_data=read.csv2('sl_size_data.csv')
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>%
group_by(subject_id, grid) %>% summarize()
unique(all_data$subject_id)
test_data=subset(all_data, sequence_type=='unpredictable'|sequence_type=='predictable')
summary.set.size <- test_data %>% group_by(subject_id, sequence_type, block, set_size) %>%
filter(correct==1 & rt < 2500) %>% summarize(mean.rt = mean(rt))
library(dplyr)
library(sciplot)
library(ggplot2)
# loading raw data ####
all_data=read.csv2('sl_size_data.csv')
# data cleaning and annotating ####
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>%
group_by(subject_id, grid) %>% summarize()
subject_set_size_condition$set_size <- as.numeric(factor(as.character(subject_set_size_condition$grid)))*2 + 2
all_data$set_size <- sapply(all_data$subject_id, function(x){
return(subset(subject_set_size_condition, subject_id == x)$set_size)
})
# count the number of subjects
unique(all_data$subject_id)
all_data$subject_id=as.numeric(all_data$subject_id)
# get test data
test_data=subset(all_data, sequence_type=='unpredictable'|sequence_type=='predictable')
# quick plot of group-level RTs by sequence type
mean(test_data$rt)
sd(test_data$rt)
hist(test_data$rt,breaks=1000,xlim=c(0,3000))
summary_data=test_data%>%group_by(subject_id, sequence_type, block)%>%filter(correct==1 & rt<2500)%>%summarize(mean.rt=mean(rt))
lineplot.CI(block, mean.rt, sequence_type, data=summary_data)
# look at effect of set size
summary.set.size <- test_data %>% group_by(subject_id, sequence_type, block, set_size) %>%
filter(correct==1 & rt < 2500) %>% summarize(mean.rt = mean(rt))
ggplot(summary.set.size, aes(x=block, y=mean.rt, color=sequence_type)) +
stat_summary(fun.y=mean, fun.ymax=function(x){return(mean(x)+se(x))}, fun.ymin = function(x){return(mean(x)-se(x))})+
facet_wrap(~set_size)
# t-tests by set_size
summary.set.size.no.block <- test_data %>% group_by(subject_id, sequence_type,set_size) %>%
filter(correct==1 & rt < 2500) %>% summarize(mean.rt = mean(rt))
bargraph.CI(set_size, mean.rt, sequence_type, data=summary.set.size.no.block)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==4), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==6), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==8), paired=T)
all_data$subject_id <- as.numeric(all_data$subject_id)
View(all_data)
unique(all_data$subject_id)
all_data$subject_id=as.numeric(all_data$subject_id)
length(unique(all_data$subject_id))
View(all_data)
all_data$value <- NULL
View(test_data)
summary.pairs.subject <- test_data %>% filter(block==0)
View(summary.pairs.subject)
summary.pairs.subject <- test_data %>% filter(block==0) %>% summarize(count=n())
summary.pairs.subject <- test_data %>% filter(block==0) %>% group_by(subject_id, set_size) %>% summarize(count=n())
View(summary.pairs.subject)
min(summary.pairs.subject$count)
summary.pairs.subject <- test_data %>% filter(block==0) %>%
group_by(subject_id, set_size) %>% filter(row_number() <= 16)
View(summary.pairs.subject)
summary.pairs.subject <- test_data %>% filter(block==0) %>%
group_by(subject_id, set_size) %>% filter(row_number() <= (set_size*2)
summary.pairs.subject <- test_data %>% filter(block==0) %>%
group_by(subject_id, set_size) %>% filter(row_number() <= (set_size*2)
)
summary.pairs.subject <- test_data %>% filter(block==0) %>%
group_by(subject_id, set_size) %>% filter(row_number() <= 16)
n.subjects <- length(unique(all_data$subject_id))
summary.pairs.subject$pair <- rep(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8), n.subjects)
View(summary.pairs.subject)
summary.pairs.subject <- test_data %>% filter(block==0) %>%
group_by(subject_id, set_size) %>% filter(row_number() <= 16) %>% select(subject_id, set_size, target)
summary.pairs.subject$pair <- rep(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8), n.subjects)
View(summary.pairs.subject)
summary.pairs.subject %>% group_by(subject_id, target, set_size) %>% filter(row_number() <= 1)
summary.pairs.subject <- summary.pairs.subject %>% group_by(subject_id, target, set_size) %>% filter(row_number() <= 1)
View(summary.pairs.subject)
View(subject_set_size_condition)
all_data$pair <- mapply(function(id, targ){
return(subset(summary.pairs.subject, subject_id == id & target == targ)$pair)
}, all_data$subject_id, all_data$target)
View(all_data)
ggplot(summary.set.size, aes(x=block, y=mean.rt, color=sequence_type)) +
stat_summary(fun.y=mean, fun.ymax=function(x){return(mean(x)+se(x))}, fun.ymin = function(x){return(mean(x)-se(x))})+
facet_wrap(~set_size)
all_data$pair <- mapply(function(id, targ){
return(subset(summary.pairs.subject, subject_id == id & target == targ)$pair)
}, all_data$subject_id, all_data$target)
summary.pairs.subject <- test_data %>% filter(block==0) %>%
group_by(subject_id, set_size) %>% filter(row_number() <= 16) %>% select(subject_id, set_size, target)
View(subject_set_size_condition)
all_data=read.csv2('sl_size_data.csv')
library(dplyr)
library(sciplot)
library(ggplot2)
# loading raw data ####
all_data=read.csv2('sl_size_data.csv')
# data cleaning and annotating ####
all_data$value <- NULL
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>%
group_by(subject_id, grid) %>% summarize()
subject_set_size_condition$set_size <- as.numeric(factor(as.character(subject_set_size_condition$grid)))*2 + 2
all_data$set_size <- sapply(all_data$subject_id, function(x){
return(subset(subject_set_size_condition, subject_id == x)$set_size)
})
all_data$subject_id <- as.numeric(all_data$subject_id)
# count the number of subjects ####
n.subjects <- length(unique(all_data$subject_id))
# get test data ####
test_data=subset(all_data, sequence_type=='unpredictable'|sequence_type=='predictable')
# quick plot of group-level RTs by sequence type ####
mean(test_data$rt)
sd(test_data$rt)
hist(test_data$rt,breaks=1000,xlim=c(0,3000))
summary_data=test_data%>%group_by(subject_id, sequence_type, block)%>%filter(correct==1 & rt<2500)%>%summarize(mean.rt=mean(rt))
lineplot.CI(block, mean.rt, sequence_type, data=summary_data)
# look at effect of set size ####
summary.set.size <- test_data %>% group_by(subject_id, sequence_type, block, set_size) %>%
filter(correct==1 & rt < 2500) %>% summarize(mean.rt = mean(rt))
ggplot(summary.set.size, aes(x=block, y=mean.rt, color=sequence_type)) +
stat_summary(fun.y=mean, fun.ymax=function(x){return(mean(x)+se(x))}, fun.ymin = function(x){return(mean(x)-se(x))})+
facet_wrap(~set_size)
# t-tests by set_size ####
summary.set.size.no.block <- test_data %>% group_by(subject_id, sequence_type,set_size) %>%
filter(correct==1 & rt < 2500) %>% summarize(mean.rt = mean(rt))
bargraph.CI(set_size, mean.rt, sequence_type, data=summary.set.size.no.block)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==4), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==6), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==8), paired=T)
# individual subject ####
summary.pairs.subject <- test_data %>% filter(block==0) %>%
group_by(subject_id, set_size) %>% filter(row_number() <= 16) %>% select(subject_id, set_size, target)
summary.pairs.subject$pair <- rep(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8), n.subjects)
summary.pairs.subject <- summary.pairs.subject %>% group_by(subject_id, target, set_size) %>% filter(row_number() <= 1)
pair$
gg
View(data)
summary.set.size <- test_data %>% group_by(subject_id, sequence_type, block, set_size) %>%
filter(correct==1 & rt < 2500) %>% summarize(mean.rt = mean(rt))
ggplot(summary.set.size, aes(x=block, y=mean.rt, color=sequence_type)) +
stat_summary(fun.y=mean, fun.ymax=function(x){return(mean(x)+se(x))}, fun.ymin = function(x){return(mean(x)-se(x))})+
facet_wrap(~set_size)
library(dplyr)
library(sciplot)
library(ggplot2)
summary.set.size <- test_data %>% group_by(subject_id, sequence_type, block, set_size) %>%
filter(correct==1 & rt < 2500) %>% summarize(mean.rt = mean(rt))
ggplot(summary.set.size, aes(x=block, y=mean.rt, color=sequence_type)) +
stat_summary(fun.y=mean, fun.ymax=function(x){return(mean(x)+se(x))}, fun.ymin = function(x){return(mean(x)-se(x))})+
facet_wrap(~set_size)
lineplot.CI(block, mean.rt, sequence_type, data=summary_data)
which_subject_id <- 14
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
summary.pairs.subject <- test_data %>% filter(block==0) %>%
group_by(subject_id, set_size) %>% filter(row_number() <= 16) %>% select(subject_id, set_size, target)
summary.pairs.subject$pair <- rep(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8), n.subjects)
summary.pairs.subject <- summary.pairs.subject %>% group_by(subject_id, target, set_size) %>% filter(row_number() <= 1)
test_data$pair <- mapply(function(sid, targ){
return(subset(summary.pairs.subject, subject_id == sid & target == targ)$pair)
}, test_data$subject_id, test_data$target)
test_data <- test_data %>% group_by(subject_id, target) %>% mutate(total.obs = row_number())
test_data <- test_data %>% filter(rt < 2500, correct == 1)
# subjects with piecewise learning:
# 14, 19, 20
which_subject_id <- 14
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
which_subject_id <- 19
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
which_subject_id <- 20
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
# individual subject ####
summary.pairs.subject <- test_data %>% filter(block==0) %>%
group_by(subject_id, set_size) %>% filter(row_number() <= 16) %>% select(subject_id, set_size, target)
summary.pairs.subject$pair <- rep(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8), n.subjects)
summary.pairs.subject <- summary.pairs.subject %>% group_by(subject_id, target, set_size) %>% filter(row_number() <= 1)
test_data$pair <- mapply(function(sid, targ){
return(subset(summary.pairs.subject, subject_id == sid & target == targ)$pair)
}, test_data$subject_id, test_data$target)
test_data <- test_data %>% group_by(subject_id, target) %>% mutate(total.obs = row_number())
test_data <- test_data %>% filter(rt < 2500, correct == 1)
# subjects with piecewise learning:
# 14, 19, 20
which_subject_id <- 21
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
# subjects with piecewise learning: ####
# 14, 19, 20
which_subject_id <- 22
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
# subjects with piecewise learning: ####
# 14, 19, 20
which_subject_id <- 20
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
library(dplyr)
library(sciplot)
library(ggplot2)
# loading raw data ####
all_data=read.csv2('sl_size_data.csv')
# data cleaning and annotating ####
all_data$value <- NULL
subject_set_size_condition = all_data %>% filter(sequence_type == 'predictable') %>%
group_by(subject_id, grid) %>% summarize()
subject_set_size_condition$set_size <- as.numeric(factor(as.character(subject_set_size_condition$grid)))*2 + 2
all_data$set_size <- sapply(all_data$subject_id, function(x){
return(subset(subject_set_size_condition, subject_id == x)$set_size)
})
all_data$subject_id <- as.numeric(all_data$subject_id)
# count the number of subjects ####
n.subjects <- length(unique(all_data$subject_id))
# get test data ####
test_data=subset(all_data, sequence_type=='unpredictable'|sequence_type=='predictable')
test_data$responses <- NULL
test_data$session_id <- NULL
test_data$survey_part <- NULL
test_data$button_pressed <- NULL
# quick plot of group-level RTs by sequence type ####
mean(test_data$rt)
sd(test_data$rt)
hist(test_data$rt,breaks=1000,xlim=c(0,3000))
summary_data=test_data%>%group_by(subject_id, sequence_type, block)%>%filter(correct==1 & rt<2500)%>%summarize(mean.rt=mean(rt))
lineplot.CI(block, mean.rt, sequence_type, data=summary_data)
# look at effect of set size ####
summary.set.size <- test_data %>% group_by(subject_id, sequence_type, block, set_size) %>%
filter(correct==1 & rt < 2500) %>% summarize(mean.rt = mean(rt))
ggplot(summary.set.size, aes(x=block, y=mean.rt, color=sequence_type)) +
stat_summary(fun.y=mean, fun.ymax=function(x){return(mean(x)+se(x))}, fun.ymin = function(x){return(mean(x)-se(x))})+
facet_wrap(~set_size)
# t-tests by set_size ####
summary.set.size.no.block <- test_data %>% group_by(subject_id, sequence_type,set_size) %>%
filter(correct==1 & rt < 2500) %>% summarize(mean.rt = mean(rt))
bargraph.CI(set_size, mean.rt, sequence_type, data=summary.set.size.no.block)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==4), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==6), paired=T)
t.test(mean.rt ~ sequence_type, data=subset(summary.set.size.no.block, set_size==8), paired=T)
# individual subject ####
summary.pairs.subject <- test_data %>% filter(block==0) %>%
group_by(subject_id, set_size) %>% filter(row_number() <= 16) %>% select(subject_id, set_size, target)
summary.pairs.subject$pair <- rep(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8), n.subjects)
summary.pairs.subject <- summary.pairs.subject %>% group_by(subject_id, target, set_size) %>% filter(row_number() <= 1)
test_data$pair <- mapply(function(sid, targ){
return(subset(summary.pairs.subject, subject_id == sid & target == targ)$pair)
}, test_data$subject_id, test_data$target)
test_data <- test_data %>% group_by(subject_id, target) %>% mutate(total.obs = row_number())
test_data <- test_data %>% filter(rt < 2500, correct == 1)
# subjects with piecewise learning: ####
# 14, 19, 20
which_subject_id <- 20
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
# subjects with piecewise learning: ####
# 14, 19, 20
which_subject_id <- 21
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
# subjects with piecewise learning: ####
# 14, 19, 20
which_subject_id <- 22
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
# subjects with piecewise learning: ####
# 14, 19, 20
which_subject_id <- 23
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
# subjects with piecewise learning: ####
# 14, 19, 20
which_subject_id <- 24
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
# subjects with piecewise learning: ####
# 14, 19, 20
which_subject_id <- 25
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
# subjects with piecewise learning: ####
# 14, 19, 20
which_subject_id <- 26
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
# subjects with piecewise learning: ####
# 14, 19, 20, 26
which_subject_id <- 27
ggplot(subset(test_data, subject_id == which_subject_id), aes(x=total.obs, y=rt, color=sequence_type))+
geom_point()+
facet_wrap(~pair)+
theme_bw()
write.csv(test_data, file='testing-data-annotated.csv')
